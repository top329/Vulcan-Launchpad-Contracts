/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VulcanPadFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "daiAddress"
      | "daiToken"
      | "depositToken"
      | "feeAmount"
      | "launchNewICO"
      | "owner"
      | "paySpamFilterFee"
      | "vulcans"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SpamFilterFeePaid"): EventFragment;

  encodeFunctionData(
    functionFragment: "daiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "daiToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "launchNewICO",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paySpamFilterFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vulcans",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "daiAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daiToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchNewICO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paySpamFilterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vulcans", data: BytesLike): Result;
}

export namespace SpamFilterFeePaidEvent {
  export type InputTuple = [user_: AddressLike, amount_: BigNumberish];
  export type OutputTuple = [user_: string, amount_: bigint];
  export interface OutputObject {
    user_: string;
    amount_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VulcanPadFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VulcanPadFactory;
  waitForDeployment(): Promise<this>;

  interface: VulcanPadFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  daiAddress: TypedContractMethod<[], [string], "view">;

  daiToken: TypedContractMethod<[], [string], "view">;

  depositToken: TypedContractMethod<
    [
      vulcanAddress_: AddressLike,
      tokenAddress_: AddressLike,
      amount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  feeAmount: TypedContractMethod<[], [bigint], "view">;

  launchNewICO: TypedContractMethod<
    [
      title_: string,
      description_: string,
      logo_: string,
      videoLink_: string,
      softcap_: BigNumberish,
      hardcap_: BigNumberish,
      endTime_: BigNumberish,
      name_: string,
      symbol_: string,
      price_: BigNumberish,
      decimal_: BigNumberish,
      totalSupply_: BigNumberish,
      tokenAddress_: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paySpamFilterFee: TypedContractMethod<[], [void], "nonpayable">;

  vulcans: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "daiAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daiToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [
      vulcanAddress_: AddressLike,
      tokenAddress_: AddressLike,
      amount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "launchNewICO"
  ): TypedContractMethod<
    [
      title_: string,
      description_: string,
      logo_: string,
      videoLink_: string,
      softcap_: BigNumberish,
      hardcap_: BigNumberish,
      endTime_: BigNumberish,
      name_: string,
      symbol_: string,
      price_: BigNumberish,
      decimal_: BigNumberish,
      totalSupply_: BigNumberish,
      tokenAddress_: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paySpamFilterFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vulcans"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "SpamFilterFeePaid"
  ): TypedContractEvent<
    SpamFilterFeePaidEvent.InputTuple,
    SpamFilterFeePaidEvent.OutputTuple,
    SpamFilterFeePaidEvent.OutputObject
  >;

  filters: {
    "SpamFilterFeePaid(address,uint256)": TypedContractEvent<
      SpamFilterFeePaidEvent.InputTuple,
      SpamFilterFeePaidEvent.OutputTuple,
      SpamFilterFeePaidEvent.OutputObject
    >;
    SpamFilterFeePaid: TypedContractEvent<
      SpamFilterFeePaidEvent.InputTuple,
      SpamFilterFeePaidEvent.OutputTuple,
      SpamFilterFeePaidEvent.OutputObject
    >;
  };
}
