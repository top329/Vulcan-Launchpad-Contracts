/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VulcanInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contributions"
      | "creator"
      | "fundsRaised"
      | "getRemainAmount"
      | "owner"
      | "projectInfo"
      | "token"
      | "tokenInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundsRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenInfo", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundsRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
}

export interface Vulcan extends BaseContract {
  connect(runner?: ContractRunner | null): Vulcan;
  waitForDeployment(): Promise<this>;

  interface: VulcanInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contributions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  fundsRaised: TypedContractMethod<[], [bigint], "view">;

  getRemainAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  projectInfo: TypedContractMethod<
    [],
    [
      [string, string, string, string, bigint, bigint, bigint, string] & {
        title: string;
        description: string;
        logo: string;
        videoLink: string;
        softcap: bigint;
        hardcap: bigint;
        endTime: bigint;
        owner: string;
      }
    ],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenInfo: TypedContractMethod<
    [],
    [
      [string, string, bigint, string, bigint, bigint] & {
        name: string;
        symbol: string;
        totalSupply: bigint;
        tokenAddress: string;
        decimal: bigint;
        price: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundsRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectInfo"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string, bigint, bigint, bigint, string] & {
        title: string;
        description: string;
        logo: string;
        videoLink: string;
        softcap: bigint;
        hardcap: bigint;
        endTime: bigint;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenInfo"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, string, bigint, bigint] & {
        name: string;
        symbol: string;
        totalSupply: bigint;
        tokenAddress: string;
        decimal: bigint;
        price: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
